from __future__ import print_function
from Coordinates import Coordinates
from speed_bar import SpeedBar
from pololu_drv8835_rpi import motors, MAX_SPEED


class Motors:
    def __init__(self):
        self._left_speed = 0
        self._right_speed = 0
        self.max_speed = 480
        self.joistick_pos = Coordinates(0, 0)

    @property
    def left_speed(self):
        return self._left_speed

    @left_speed.setter
    def left_speed(self, value):
        if value < -self.max_speed:
            self._left_speed = -self.max_speed
        elif value > self.max_speed:
            self._left_speed = self.max_speed
        else:
            self._left_speed = value

    @property
    def right_speed(self):
        return self._right_speed

    @right_speed.setter
    def right_speed(self, value):
        if value < -self.max_speed:
            self._right_speed = -self.max_speed
        elif value > self.max_speed:
            self._right_speed = self.max_speed
        else:
            self._right_speed = value

    #def set_speeds(self, left_speed, right_speed):
    #    self.left_speed = left_speed*self.max_speed
    #    self.right_speed = right_speed*self.max_speed

    def get_rel_left_speed(self):
        """
        :return: relative left motor speed (percent of speed - float from -1 to 1).
        """
        return self.left_speed / self.max_speed

    def get_rel_right_speed(self):
        """
        :return: relative right motor speed (percent of speed - float from -1 to 1).
        """
        return self.right_speed / self.max_speed


    def move(self):
        if not (-self.max_speed <= self.left_speed <= self.max_speed or
                -self.max_speed <= self.right_speed <= self.max_speed):
            raise ValueError(f"Speed limit exceeded: "
                             f"\n left motors {self.left_speed} "
                             f"\n right motors {self.right_speed}"
                             f"\n avaliable max speed {self.max_speed}")
        motors.motor1.setSpeed(int(self.left_speed))
        motors.motor2.setSpeed(int(self.right_speed))
        

    def update_motors(self, stick_position, start_point, joystick_range):
        self.joistick_pos = stick_position - start_point
        self.joistick_pos.x = self.joistick_pos.x / joystick_range
        self.joistick_pos.y = self.joistick_pos.y / joystick_range
        self.calculate_speed()

    def calculate_speed(self):
        turn, forward = self.joistick_pos.tuple
        signed_square = lambda x: x * abs(x)
        signed_sqrt = lambda x: -(-x) ** .5 if x < 0 else x ** .5
        self.left_speed = (signed_sqrt(signed_square(-forward) + signed_square(turn)))*self.max_speed
        self.right_speed = (signed_sqrt(signed_square(-forward) - signed_square(turn)))*self.max_speed

    def drive_car(self, stick_position, start_point, joystick_range):
        self.update_motors(stick_position, start_point, joystick_range)
        self.move()

